# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EvwdaWkwALyanMzSsMXTeC0KNOK95gFH
"""

import torch
from torch import nn, optim
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
from torchvision import datasets, transforms
import numpy as np

class CustomFashionMNIST(Dataset):
    def __init__(self, root='./data', train=True, transform=None):
        self.dataset = datasets.FashionMNIST(
            root=root,
            train=train,
            download=True
        )
        self.images = self.dataset.data.numpy().astype(np.float32) / 255.0
        self.labels = self.dataset.targets.numpy()
        self.transform = transform

    def __len__(self):
        return len(self.images)

    def __getitem__(self, index):
        img = torch.FloatTensor(self.images[index]).unsqueeze(0)
        lbl = self.labels[index]
        if self.transform:
            img = self.transform(img)
        return img, lbl

class SimpleFashionNet(nn.Module):
    def __init__(self):
        super(SimpleFashionNet, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)

        # Updated fully connected layer with the correct input size
        self.fc1 = nn.Linear(64 * 7 * 7, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = F.relu(self.conv3(x))

        # Reshape tensor based on the calculated dimensions
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

def save_best_model(model, accuracy):
    """Save the best model based on accuracy in a single file."""
    state = {
        'model_state_dict': model.state_dict(),
        'accuracy': accuracy
    }
    filename = 'best_model.pt'
    torch.save(state, filename)
    print(f"Best model saved as '{filename}' with accuracy: {accuracy:.2f}%")

def load_best_model(filepath='best_model.pt'):
    """Load the saved model."""
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = SimpleFashionNet().to(device)
    try:
        checkpoint = torch.load(filepath, map_location=device)
        model.load_state_dict(checkpoint['model_state_dict'])
        accuracy = checkpoint.get('accuracy', 0.0)
        print(f"Model loaded from '{filepath}' with accuracy: {accuracy:.2f}%")
        return model, accuracy
    except FileNotFoundError:
        print(f"No saved model found at '{filepath}'")
        return model, 0.0

if __name__ == "__main__":
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Computation will run on: {device}")

    train_data = CustomFashionMNIST(train=True)
    test_data = CustomFashionMNIST(train=False)

    train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
    test_loader = DataLoader(test_data, batch_size=64)

    model = SimpleFashionNet().to(device)
    optimizer = optim.Adam(model.parameters(), lr=0.0005)
    loss_fn = nn.CrossEntropyLoss()

    num_epochs = 50
    best_accuracy = 0.0

    for epoch in range(num_epochs):
        model.train()
        for i, (images, labels) in enumerate(train_loader):
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = loss_fn(outputs, labels)
            loss.backward()
            optimizer.step()
            if i % 50 == 0:
                print(f"Epoch {epoch + 1}/{num_epochs}, Step {i}, Loss: {loss.item():.4f}")

        model.eval()
        total, correct = 0, 0
        with torch.no_grad():
            for images, labels in test_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        accuracy = 100 * correct / total
        print(f"Test accuracy for Epoch {epoch + 1}: {accuracy:.2f}%")

        if accuracy > best_accuracy:
            best_accuracy = accuracy
            save_best_model(model, best_accuracy)

    print("Model training complete!")
    print(f"Highest achieved accuracy: {best_accuracy:.2f}%")